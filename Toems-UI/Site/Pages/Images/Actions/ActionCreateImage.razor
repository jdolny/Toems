@using Toems_Common
@using Toems_Common.Entity
@using Toems_Common.Enum
@inject Toems_ApiCalls.APICall Call
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            Create Image
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="@Image.Name" Label="Image Name" Variant="Variant.Outlined"/>
        <MudTextField @bind-Value="@Image.Description" Label="Description" AutoGrow="true" Lines="2" Variant="Variant.Outlined"/>
        <MudSelect Dense="true" T="string" Value="@Image.Environment" Label="Imaging Client Environment"  ValueChanged="@(s => OnEnvironmentChanged(s))" AdornmentIcon="@Icons.Material.Filled.ArrowDropDownCircle" Variant="Variant.Outlined" AdornmentColor="Color.Primary">
            <MudSelectItem T="string" Value=@("linux")>Linux</MudSelectItem>
            <MudSelectItem T="string" Value=@("winpe")>WinPE</MudSelectItem>
        </MudSelect>
        <MudSelect Dense="true" T="string" Value="@Image.Type" Label="Image Type" ValueChanged="@(s => OnTypeChanged(s))"  AdornmentIcon="@Icons.Material.Filled.ArrowDropDownCircle" Variant="Variant.Outlined" AdornmentColor="Color.Primary">
            @foreach (var environmentType in _selectedEnvironmentTypes)
            {
                <MudSelectItem Value="@environmentType">@environmentType</MudSelectItem>
            }
        </MudSelect>
        <MudGrid>
            <MudItem xs="12" sm="6">
                <MudText Typo="Typo.body1">Protected</MudText>
                <MudToggleGroup T="bool" SelectionMode="SelectionMode.SingleSelection" @bind-Value="@Image.Protected" Color="Color.Primary" CheckMark FixedContent Size="Size.Small">
                    <MudToggleItem Value="@(true)" Text="Yes"/>
                    <MudToggleItem Value="@(false)" Text="No"/>
                </MudToggleGroup>
            </MudItem>
            <MudItem xs="12" sm="6">
            <MudText Typo="Typo.body1">Available On-Demand</MudText>
            <MudToggleGroup T="bool" SelectionMode="SelectionMode.SingleSelection" @bind-Value="@Image.IsVisible" Color="Color.Primary"  CheckMark FixedContent Size="Size.Small">
                <MudToggleItem Value="@(true)" Text="Yes"/>
                <MudToggleItem Value="@(false)" Text="No"/>
            </MudToggleGroup>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Create">Create</MudButton>
    </DialogActions>
</MudDialog>


@code {
    public EntityImage Image { get; set; } = new()
    {
        Environment = "linux",
        Type = "Block"
    };
    
    string[] linuxTypes =
    [
        "Block","File"
    ];
    string[] winPeTypes =
    [
        "Block","File", "Both"
    ];

    string[] _selectedEnvironmentTypes;
    
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }
    private void Cancel() => MudDialog.Cancel();

    protected async override Task OnInitializedAsync()
    {
        _selectedEnvironmentTypes = linuxTypes;
    }
    private async Task Create()
    {
        var result = await Call.ImageApi.Post(Image);
        if (!result.Success)
        {
            Snackbar.Add($"Could not create {Image.Name}:  {result.ErrorMessage}", Severity.Error);
        }
        else
        {
            Snackbar.Add($"Successfully created {Image.Name}", Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
        }
    }
    
    private async Task OnEnvironmentChanged(string environment)
    {
        Image.Environment = environment;
        if(environment== "linux")
        {
            Image.Type = "Block";
            _selectedEnvironmentTypes = linuxTypes;
        }
        else if(environment == "winpe")
        {
            Image.Type = "File";
            _selectedEnvironmentTypes = winPeTypes;
        }
    }

    private async Task OnTypeChanged(string imageType)
    {
        Image.Type = imageType;
    }
}