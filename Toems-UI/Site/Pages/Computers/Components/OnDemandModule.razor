@using Toems_Common.Dto
@using Toems_Common.Entity
@using Toems_UI.Site.Layout
@inject Toems_ApiCalls.APICall Call
@inject ISnackbar Snackbar
@layout MainLayout
@inherits BaseComponent

<ActionButtons InsertAtTop="true">
    <MainButton/>
    <Content/>
</ActionButtons>

<MudStepper CenterLabels="true" ShowResetButton>
    <MudStep Title="When should module run?">
        <MudSelect Dense="true" T="string" Value="@_whenToRun" Label="Category Filter"  AdornmentIcon="@Icons.Material.Filled.Category" Variant="Variant.Outlined" AdornmentColor="Color.Primary">
            <MudSelectItem Value="@("First Opportunity")">First Opportunity</MudSelectItem>
            <MudSelectItem Value="@("Now")">Now</MudSelectItem>
            <MudSelectItem Value="@("Later")">Later</MudSelectItem>
        </MudSelect>
        </MudStep>
    <MudStep Title="Create an ad group" SecondaryText="Optional" Skippable="true">
        <MudTextField T="string" Value="@_searchText" ValueChanged="Callback"></MudTextField>
        <MudDropContainer T="DtoModule" Items="_modules" ItemsSelector="@((item, dropzone) => item.DropZoneIdentifier == dropzone)" ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
            <ChildContent>
                @for (int i = 1; i < 3; i++)
                {
                    var dropzone = i.ToString();
                    <MudPaper Class="ma-4 flex-grow-1">
                        <MudList T="string" Class="d-flex flex-column mud-height-full">
                            <MudListSubheader>Drop Zone @dropzone</MudListSubheader>
                            <MudDropZone T="DtoModule" Identifier="@dropzone" Class="flex-grow-1"/>
                        </MudList>
                    </MudPaper>
                }
            </ChildContent>
            <ItemRenderer>
                <MudListItem T="string">
                    <div @oncontextmenu="@((MouseEventArgs e) => OnRightClick(context.Name, e))"
                         @oncontextmenu:preventDefault="true"
                         @oncontextmenu:stopPropagation="true">
                        @(context.Name + "/" + context.ModuleType)
                    </div>
                </MudListItem>
            </ItemRenderer>
        </MudDropContainer>
    </MudStep>
    <MudStep Title="Create an ad">Create an ad content</MudStep>
</MudStepper>



@code {
    [Parameter] public required EntityComputer Computer { get; set; }
    private string _whenToRun = "Now";
    private string _searchText { get; set; } = "";
    private IEnumerable<DtoModule> _modules = new List<DtoModule>();
    private void ItemUpdated(MudItemDropInfo<DtoModule> dropItem)
    {
        dropItem.Item.DropZoneIdentifier = dropItem.DropzoneIdentifier;
    }
    private void OnRightClick(string item, MouseEventArgs e)
    {

        Console.WriteLine($"Right-clicked on item: {item}");

    }
    protected override async Task OnParametersSetAsync()
    {
        if (Computer.Id == 0 || ParametersSet || !SetTitleAndBreadcrumbs($"{Computer.Name}",new ComputerBreadcrumbs(Computer.Name).OnDemandModule())) return;
      
        
        var filter = new DtoModuleSearchFilter();
        filter.IncludeCommand = true;
        filter.IncludeFileCopy = true;
        filter.IncludeMessage = true;
        filter.IncludePrinter = true;
        filter.IncludeScript = true;
        filter.IncludeSoftware = true;
        filter.IncludeWinget = true;
        filter.IncludeWinPe = true;
        filter.IncludeWu = true;
        filter.Limit = 100;
        filter.Searchstring = _searchText;
        if (!_modules.Any())
        {
            _modules = await Call.PolicyApi.GetAllModules(filter);
            foreach (var m in _modules)
                m.DropZoneIdentifier = "1";
        }

    }
    
    private async Task Update()
    {
      
    }

    private async Task Callback(string obj)
    {
        var filter = new DtoModuleSearchFilter();
        filter.IncludeCommand = true;
        filter.IncludeFileCopy = true;
        filter.IncludeMessage = true;
        filter.IncludePrinter = true;
        filter.IncludeScript = true;
        filter.IncludeSoftware = true;
        filter.IncludeWinget = true;
        filter.IncludeWinPe = true;
        filter.IncludeWu = true;
        filter.Limit = 100;
        filter.Searchstring = obj;
        _searchText = obj;
        
            _modules = await Call.PolicyApi.GetAllModules(filter);
            foreach (var m in _modules)
                m.DropZoneIdentifier = "1";
            Layout?.NotifyStateChange();
            Console.WriteLine("state updated" +  obj);
        
    }

}