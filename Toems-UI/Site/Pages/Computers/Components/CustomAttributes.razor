@using Toems_ApiCalls
@using Toems_Common.Entity
@using Toems_UI.Site.Layout
@using Toems_Common.Dto
@using Toems_Common.Enum
@using Toems_UI.Site.Pages.Computers.Actions
@layout MainLayout
@inject APICall Call
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inherits BaseComponent

<ActionButtons InsertAtTop="true">
    <Content>
        <MudMenuItem Label="Update Attribute Values" OnClick="UpdateAttributes"/>
    </Content>
</ActionButtons>

@if(!_definedAttributes.Any())  
{
    <MudText Typo="Typo.body2">No custom attributes have been defined.  You can define them at Global Properties.</MudText>
}
else
{
    <MudGrid>

        @foreach (var customAttribute in _definedAttributes)
        {
            <MudItem xs="12" sm="6">
                <MudText Typo="Typo.body1"><b>@customAttribute.Name</b></MudText>
                <MudTextField Variant="Variant.Outlined" T="string" AutoGrow="@(customAttribute.TextMode == EnumCustomAttribute.TextMode.MultiLine)" Lines="@(customAttribute.TextMode == EnumCustomAttribute.TextMode.MultiLine ? 4 : 0)" Typo="Typo.body2" Value="@_computerAttributes.FirstOrDefault(x => x.CustomAttributeId == customAttribute.Id)?.Value"></MudTextField>
            </MudItem>



        }
    </MudGrid>
}

@code {

    private readonly List<BreadcrumbItem> _breadcrumbs =
    [
        new("Home", href: "/"),
        new("Computer Search", href: null, disabled: true)
    ];

    [Parameter] public EntityComputer Computer { get; set; } = new();
    private IEnumerable<EntityCustomComputerAttribute> _computerAttributes = new List<EntityCustomComputerAttribute>();
    private IEnumerable<EntityCustomAttribute> _definedAttributes = new List<EntityCustomAttribute>();

    protected override async Task OnParametersSetAsync()
    {
        _definedAttributes = await Call.CustomAttributeApi.GetForBuiltInComputers();
        if (Computer.Id == 0) return;
        if (!SetTitleAndBreadcrumbs($"{Computer.Name} Custom Attributes", _breadcrumbs)) return;
        await LoadCustomAttributes();
    }

    private async Task LoadCustomAttributes()
    {
        if (!_definedAttributes.Any())
            return;
        _computerAttributes = await Call.ComputerApi.GetCustomAttributes(Computer.Id);

        int lines = 0;
        lines = _definedAttributes.FirstOrDefault().TextMode == EnumCustomAttribute.TextMode.MultiLine ? 4 : 1;
    }

    private async Task UpdateAttributes()
    {


    }

}