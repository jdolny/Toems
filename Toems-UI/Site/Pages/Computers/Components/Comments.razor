@using Toems_ApiCalls
@using Toems_Common.Entity
@using Toems_UI.Site.Layout
@using Toems_Common.Dto
@using Toems_UI.Site.Pages.Computers.Actions
@layout MainLayout
@inject APICall Call
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inherits BaseComponent

<ActionButtons InsertAtTop="true">
    <Content>
        <MudMenuItem Label="Create Comment" OnClick="CreateComment"/>
    </Content>
</ActionButtons>

@if(!_comments.Any())  
{
    <MudText Typo="Typo.body2">No comments have been added to this computer.</MudText>
}
else
{
    foreach (var comment in _comments)
    {
        <MudCard Outlined="true">
            <MudCardContent>
                
                <MudText GutterBottom="true">On @comment.CommentTime @comment.Username Added</MudText>
                <MudText Typo="Typo.body2">@((MarkupString)comment.Comment)</MudText>
            </MudCardContent>

        </MudCard>
    }
}

@code {

    private readonly List<BreadcrumbItem> _breadcrumbs =
    [
        new("Home", href: "/"),
        new("Computer Search", href: null, disabled: true)
    ];

    [Parameter] public EntityComputer Computer { get; set; } = new();
    private IEnumerable<DtoComputerComment> _comments = new List<DtoComputerComment>();

    protected override async Task OnParametersSetAsync()
    {
        if (Computer.Id == 0) return;
        if (!SetTitleAndBreadcrumbs($"{Computer.Name} Comments", _breadcrumbs)) return;
        await LoadComments();
    }

    private async Task LoadComments()
    {
        _comments = await Call.ComputerApi.GetComments(Computer.Id);
    }
    
    private async Task CreateComment()
    {
        var parameters = new DialogParameters<ActionCreateComment>
        {
            { x => x.Computer, Computer },
        };
        var dialog = await DialogService.ShowAsync<ActionCreateComment>("Create Comment", parameters, DialogOptionsConstants.DeleteDialogOptions);
        await dialog.Result;
        await LoadComments();

    }

}