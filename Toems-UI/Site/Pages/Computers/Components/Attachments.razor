@using Toems_ApiCalls
@using Toems_Common.Dto
@using Toems_Common.Entity
@using Toems_UI.Site.Layout
@using Toems_UI.Components
@using Microsoft.Extensions.Configuration;
@layout MainLayout
@inject APICall Call
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration
@inject LocalAuthStateProvider AuthState
<ComponentFileUploader Computer="Computer"/>

<MudDataGrid Striped="true" T="EntityAttachment" Class="mb-10" Elevation="5" MultiSelection="true" Items="@attachments" ColumnResizeMode="ResizeMode.Column" Filterable="true" FilterMode="DataGridFilterMode.ColumnFilterMenu" FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive" @bind-SelectedItems="_selectedAttachments">
    <ToolBarContent>
        <MudGrid>
            <MudSpacer />
               
        </MudGrid>
    </ToolBarContent>
    <PagerContent><MudDataGridPager T="EntityAttachment" /></PagerContent>
    <Columns>
        <SelectColumn T="EntityAttachment" />
        <PropertyColumn Property="x => x.Name" Title="Name" />
        <PropertyColumn Property="x => x.DirectoryGuid" Title="Directory GUID" />
        <PropertyColumn Property="x => x.AttachmentTime" Title="Time" />
        <PropertyColumn Property="x => x.UserName" Title="User" />
   
        <TemplateColumn Title="Actions" StickyRight="true">
            <CellTemplate>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small"  OnClick="@(() => DownloadAttachment(context.Item))">Download</MudButton>
               
                </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>
@code {
    [Parameter] public EntityComputer Computer { get; set; } = new();
    [CascadingParameter] public MainLayout? Layout { get; set; }
    private IEnumerable<EntityAttachment> attachments = new List<EntityAttachment>();
    private HashSet<EntityAttachment> _selectedAttachments = [];
    private bool _titleSet = false;

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrEmpty(Computer.Name)) return;
        attachments = await Call.ComputerApi.GetAttachments(Computer.Id);
        if (Layout is null ||  _titleSet) return;
        Layout.UpdateAppBar($"{Computer.Name} Attachments",
            new List<BreadcrumbItem>
            {
                new("Home", href: "/"),
                new("Computer Search", href: null, disabled: true)
            }
        );
        _titleSet = true;
    }
    
    private async Task DownloadAttachment(EntityAttachment attachment)
    {
        var authToken = await AuthState.GetToken();
        var browserToken = await Call.BrowserTokenApi.GetToken();
        string apiUrl = Configuration["ApplicationApiUrl"];
        apiUrl += $"/Attachment/GetAttachment?Id={attachment.Id}&Token={browserToken.Token}";
        await JSRuntime.InvokeVoidAsync("eval", $"window.location.href = '{apiUrl}'");

    }

    private async Task Delete()
    {
        var contentText = $"Are you sure you want to delete the following attachments?\n";
        foreach (var attachment in _selectedAttachments)
            contentText += $"\n{attachment.Name}";

        var parameters = new DialogParameters<DialogConfirm>
        {
            { x => x.ContentText, contentText },
            { x => x.ButtonText, "Delete" },
            { x => x.Color, Color.Error }
        };

        var dialog = await DialogService.ShowAsync<DialogConfirm>("Delete", parameters, DialogOptionsConstants.DeleteDialogOptions);
        var result = await dialog.Result;

        var errorCount = 0;
        var successCount = 0;
        if (!result.Canceled && result.Data is true)
        {
            foreach (var attachment in _selectedAttachments)
            {
                DtoActionResult response;
                response = await Call.AttachmentApi.Delete(attachment.Id);

                if (response.Success)
                    successCount++;
                else
                    errorCount++;
            }

            string message;
            Severity severity;

            if (errorCount == 0)
            {
                message = $"Successfully deleted {successCount} attachment{(successCount == 1 ? "" : "s")}.";
                severity = Severity.Success;
            }
            else if (successCount == 0)
            {
                message = $"Failed to delete {errorCount} attachment{(errorCount == 1 ? "" : "s")}.";
                severity = Severity.Error;
            }
            else
            {
                message = $"Deleted {successCount} attachment{(successCount == 1 ? "" : "s")} successfully. Failed to delete {errorCount}.";
                severity = Severity.Warning;
            }

            Snackbar.Add(message, severity);
            _selectedAttachments.Clear();
        }
    }

}