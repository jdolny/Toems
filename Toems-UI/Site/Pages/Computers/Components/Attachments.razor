@using System.Reflection.Metadata
@using Toems_ApiCalls
@using Toems_Common.Entity
@using Toems_UI.Site.Layout
@using Toems_UI.Components
@using Microsoft.Extensions.Configuration;
@layout MainLayout
@inject APICall Call
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration
@inherits BaseComponent

<MudTabs Outlined="true" Position="Position.Top" Centered="true" Rounded="true" Border="true"  
         ApplyEffectsToContainer="false" PanelClass="pt-4" Elevation="2"    >
    <MudTabPanel Text="Upload Attachments" >
        <ActionButtons InsertAtTop="true">
            <MainButton/>
            <Content/>
        </ActionButtons>
        <MudPaper Class="pa-4" Elevation="2">
        <ComponentFileUploader Computer="Computer" OnUploadCompleted="LoadAttachments"/>
        </MudPaper>
    </MudTabPanel>

    <MudTabPanel Text="Current Attachments">
        <ActionButtons InsertAtTop="true">
            <MainButton>
                <MudButton  OnClick="DeleteAttachments">Delete Attachment</MudButton>
            </MainButton>
            <Content/>
        </ActionButtons>
        @if (!attachments.Any())
        {
            <MudText Typo="Typo.body2">No attachments have been uploaded for this computer.</MudText>
        }
        else
        {
            <MudDataGrid ShowMenuIcon="true" Hideable="true" Dense="true" RowsPerPage="@Constants.DefaultPageSize"  FixedHeader="true"  FixedFooter="true" T="EntityAttachment" Class="mb-2 full-data-grid-with-tabs" Elevation="5" MultiSelection="true" Items="@attachments" ColumnResizeMode="ResizeMode.Column" Filterable="true" FilterMode="DataGridFilterMode.ColumnFilterMenu" FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive" @bind-SelectedItems="_selectedAttachments">
                <ToolBarContent>
                    <MudText Typo="Typo.h5" Color="Color.Primary">Computer Attachments</MudText>
                    <MudSpacer/>
                </ToolBarContent>
                <PagerContent><MudDataGridPager T="EntityAttachment"/></PagerContent>
                <Columns>
                    <SelectColumn T="EntityAttachment"/>
                    <PropertyColumn Property="x => x.Name" Title="Name"  />
                    <PropertyColumn Property="x => x.DirectoryGuid" Title="Directory GUID"  Hidden="true"/>
                    <PropertyColumn Property="x => x.AttachmentTime" Title="Time" />
                    <PropertyColumn Property="x => x.UserName" Title="User" />

                    <TemplateColumn Title="Actions" StickyRight="true">
                        <CellTemplate>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="@(() => DownloadAttachment(context.Item))">Download</MudButton>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        }
    </MudTabPanel>
</MudTabs>

@code {
    [Parameter] public EntityComputer Computer { get; set; } = new();
    private IEnumerable<EntityAttachment> attachments = new List<EntityAttachment>();
    private HashSet<EntityAttachment> _selectedAttachments = [];

    protected override async Task OnParametersSetAsync()
    {
        if (Computer.Id == 0 || ParametersSet || !SetTitleAndBreadcrumbs($"{Computer.Name}",new ComputerBreadcrumbs(Computer.Name).Attachments())) return;
        await LoadAttachments();
    }

    private async Task LoadAttachments()
    {
        attachments = await Call.ComputerApi.GetAttachments(Computer.Id);
    }

    private async Task DownloadAttachment(EntityAttachment attachment)
    {
        var browserToken = await Call.BrowserTokenApi.GetToken();
        var apiUrl = $"{Configuration["ApplicationApiUrl"]}/Attachment/GetAttachment?Id={attachment.Id}&Token={browserToken.Token}";
        await JSRuntime.InvokeVoidAsync("eval", $"window.location.href = '{apiUrl}'");
    }

    private async Task DeleteAttachments()
    {
        if (!_selectedAttachments.Any())
        {
            Snackbar.Add("Please select at least one attachment to delete.", Severity.Warning);
            return;
        }
        
        var contentText = $"Are you sure you want to delete the following attachments?\n";
        foreach (var attachment in _selectedAttachments)
            contentText += $"\n{attachment.Name}";

        var parameters = new DialogParameters<DialogConfirm>
        {
            { x => x.ContentText, contentText },
            { x => x.ButtonText, "Delete" },
            { x => x.Color, Color.Error }
        };

        var dialog = await DialogService.ShowAsync<DialogConfirm>("Delete", parameters, Constants.DeleteDialogOptions);
        var result = await dialog.Result;

        var errorCount = 0;
        var successCount = 0;
        if (!result.Canceled && result.Data is true)
        {
            foreach (var attachment in _selectedAttachments)
            {
                var response = await Call.AttachmentApi.Delete(attachment.Id);

                if (response.Success)
                    successCount++;
                else
                    errorCount++;
            }
            
            string message;
            Severity severity;
            if (errorCount == 0)
            {
                message = $"Successfully deleted {successCount} attachment{(successCount == 1 ? "" : "s")}.";
                severity = Severity.Success;
            }
            else if (successCount == 0)
            {
                message = $"Failed to delete {errorCount} attachment{(errorCount == 1 ? "" : "s")}.";
                severity = Severity.Error;
            }
            else
            {
                message = $"Deleted {successCount} attachment{(successCount == 1 ? "" : "s")} successfully. Failed to delete {errorCount}.";
                severity = Severity.Warning;
            }

            Snackbar.Add(message, severity);
            _selectedAttachments.Clear();
            await LoadAttachments();
        }
    }

    
}