@page "/Computers/Details/{Id:int}"
@using Toems_Common.Entity
@using Toems_UI.Site.Layout
@using Toems_UI.Site.Pages.Computers.Components
@using Toems_UI.Components
@using Toems_UI.Site.Pages.Computers.Actions
@inject Toems_ApiCalls.APICall Call
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JS
@inherits BasePage
<ActionButtons>
    <Content>
        <MudMenuItem Label="Get Status" OnClick="@((e) => GetStatusAsync())"/>
    </Content>
</ActionButtons>


<MudPaper Class="pa-2 " Elevation="5"  >

    <MudTabs Outlined="true" Position="@pos" Rounded="false" Border="true" @bind-ActivePanelIndex="_selectedTabIndex"
             ApplyEffectsToContainer="true" Class="mt-2" PanelClass="pa-4 " Elevation="0" AlwaysShowScrollButtons="true" >
        <MudTabPanel Text="Attachments">
            <MudStack Class="stack-full">
                <Attachments Computer="@Computer"/>

            </MudStack>
        </MudTabPanel>
        <MudTabPanel Text="Certificates">
            <MudStack Class="stack-full">
            <Certificates Computer="@Computer"/>
          </MudStack>
        </MudTabPanel>
        <MudTabPanel Text="Comments" >
            <MudStack Class="stack-full">
                <Comments Computer="@Computer"/>
            </MudStack>
        </MudTabPanel>
        <MudTabPanel Text="Custom Attributes" >
            <MudStack Class="width-full">
                <CustomAttributes Computer="@Computer"/>
            </MudStack>
        </MudTabPanel>
        <MudTabPanel Text="Custom Inventory">
       
            <CustomInventory Computer="@Computer"/>
         
        </MudTabPanel>
        <MudTabPanel Text="Effective Policy" >
            <MudStack Class="stack-full">
                <EffectivePolicy Computer="@Computer"/>
            </MudStack>
        </MudTabPanel>
        <MudTabPanel Text="General" >
            <MudStack>
                <General Computer="@Computer"/>
                <br/><br/>
            </MudStack>
        </MudTabPanel>
        <MudTabPanel Text="Imaging Logs">
            <MudStack Class="stack-full">
            <ImagingLogs Computer="@Computer"/>
            </MudStack>
        </MudTabPanel>
        <MudTabPanel Text="Image Settings" >
            <MudStack Class="stack-full">
                <ImageSettings Computer="@Computer"/>
            </MudStack>
        </MudTabPanel>
        <MudTabPanel Text="Instant Module Runner">
            <MudStack Class="stack-full">
                <OnDemandModule Computer="@Computer"/>
            </MudStack>
        </MudTabPanel>
        <MudTabPanel Text="Policy History"  >
            <MudStack Class="stack-full">
                <PolicyHistory Computer="@Computer"/>
         </MudStack>
        </MudTabPanel>
        <MudTabPanel Text="Software" >
            <Software Computer="@Computer"/>
        </MudTabPanel>
        <MudTabPanel Text="System Info">
            <MudStack Class="stack-full">
                <SystemInformation Computer="@Computer"/>
            </MudStack>
        </MudTabPanel>
        <MudTabPanel Text="Usages">
        </MudTabPanel>
        <MudTabPanel Text="User Login History" >
        </MudTabPanel>
        <MudTabPanel Text="Windows Updates"  >
        </MudTabPanel>

    </MudTabs>
</MudPaper>

@code {
    [Parameter] public int Id { get; set; }
    [Parameter] public EntityComputer Computer {get; set;} = new();
    public Position pos { get; set; } = Position.Left;
    private int _selectedTabIndex = 6;
    protected override async Task OnInitializedAsync()
    {
        Computer = await Call.ComputerApi.Get(Id);
        var deviceInfo = await JS.InvokeAsync<DeviceInfo>("getDeviceInfo");
        if(deviceInfo.ScreenWidth < 768)
        {
            pos = Position.Top;
        }
        else
        {
            pos = Position.Left;
        }
    }
    
    private async Task GetStatusAsync()
    {
        var parameters = new DialogParameters<ActionStatus>
        {
            { x => x.Computer, Computer },
        };
        await DialogService.ShowAsync<ActionStatus>("New", parameters, Constants.DeleteDialogOptions);
    }
    private class DeviceInfo
    {
        public int ScreenWidth { get; set; }
        public int ScreenHeight { get; set; }
        public bool IsMobile { get; set; }
        public bool IsTouchDevice { get; set; }
    }
  
}
