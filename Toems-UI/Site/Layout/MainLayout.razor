@inherits LayoutComponentBase
@inject LocalAuthStateProvider AuthStateProvider
@using System.Timers
@inject IJSRuntime JS
@implements IAsyncDisposable
<Authorize/>
<MudThemeProvider Theme="@_theme" IsDarkMode="IsDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<CascadingValue Value="this">
<MudLayout>
    <MudAppBar Elevation="1" Dense="true"  >
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((_) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Color="Color.Secondary" Class="ml-3">Theopenem</MudText>
        <MudSpacer />
        <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle" />
        
        <MudIconButton Icon="@Icons.Material.Filled.Help" Color="Color.Default" />
        <MudMenu>
            <ActivatorContent>
                <MudChip T="string" Icon="@Icons.Material.Filled.Person" Color="Color.Primary">@_currentUser</MudChip>
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem Label="Profile" />
                <MudMenuItem Label="Theme" />
                <MudMenuItem Label="Usage" />
            </ChildContent>
        </MudMenu>
     
    </MudAppBar>
   
   
    <MudDrawer  @bind-Open="_drawerOpen" Elevation="2" Variant="DrawerVariant.Responsive" Width="250px" >
        <NavMenu/>
        <div>
            Token expires in: <span id="@CountdownElementId">00:00:00</span>
            <MudButton Color="Color.Primary" FullWidth="true" OnClick="DrawerToggle">Close Menu</MudButton>
        </div>
    </MudDrawer>
    
    
<MudAppBar Elevation="10" Fixed="true" Width="100%" Class="mt-12" Style="z-index: 10" Color="Color.Secondary"  Contextual>
    
        <div class="d-flex flex-column">
            <MudBreadcrumbs Items="Breadcrumbs" Separator=" / " Class="mb-0 d-none d-lg-flex" Style="line-height:0; margin-top:-20px;" >
                <ItemTemplate>
                    <MudLink Typo="Typo.caption" Href="@context.Href" Disabled="@context.Disabled"  Color="@(context.Disabled ? Color.Primary : Color.Primary)">@context.Text</MudLink>

                </ItemTemplate>
            </MudBreadcrumbs>
            <MudText Typo="Typo.h5" Style="line-height:.5;" Color="Color.Primary" Class="font-weight-bold responsive-title">@PageTitle</MudText>
          
        </div>
       
        <MudSpacer/>
        <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" >
            @MainButton
            <MudMenu Icon="@Icons.Material.Filled.ArrowDropDown" Style="align-self: auto;">
                @if (ActionButtonsTop is not null)
                {
                    @ActionButtonsTop
                    @if (ActionButtonsBottom is not null)
                    {
                        <MudDivider/>
                    }
                }
                @if (ActionButtonsBottom is not null)
                {
                    @ActionButtonsBottom
                }
            </MudMenu>
        </MudButtonGroup>

    </MudAppBar>

    <MudMainContent>
        <MudContainer Class="mt-19" MaxWidth="MaxWidth.False">
            @Body
        </MudContainer>
    </MudMainContent>

</MudLayout>
</CascadingValue>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    public string PageTitle { get; set; } = "";
    public List<BreadcrumbItem> Breadcrumbs { get; set; } = new();

    public RenderFragment? ActionButtonsTop { get; set; }
    public RenderFragment? ActionButtonsBottom { get; set; }
    public RenderFragment? MainButton { get; set; }

    public void ClearActionButtons()
    {
        ActionButtonsTop = null;
        ActionButtonsBottom = null;
        StateHasChanged();
    }

    public void NotifyStateChange() => StateHasChanged();
    
    private bool _drawerOpen = true;
    public bool IsDarkMode;
    private MudTheme? _theme;
    private string _currentUser = string.Empty;
    private DateTime? TokenExpiration { get; set; }
    private Timer? CountdownTimer;
    private string CountdownElementId { get; } = $"token-countdown-{Guid.NewGuid():N}";
    private bool IsCircuitActive { get; set; } = true;

    public void UpdateAppBar(string title, List<BreadcrumbItem> breadcrumbs)
    {
        PageTitle = title;
        Breadcrumbs = breadcrumbs;
        StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _currentUser = user.Identity?.Name ?? string.Empty;
        var expiresAt = await AuthStateProvider.GetTokenExpiration();
        TokenExpiration = DateTimeOffset.FromUnixTimeSeconds(expiresAt).UtcDateTime;
        

        CountdownTimer = new Timer(1000);
        CountdownTimer.Elapsed += async (_, _) =>
        {
            if (!IsCircuitActive)
                return;
            var timeLeft = TokenExpiration.Value - DateTime.UtcNow;
            var timeLeftFormatted = timeLeft.Seconds > 0 ? timeLeft.ToString(@"hh\:mm\:ss") : "00:00:00";

            try
            {
                await JS.InvokeVoidAsync("updateCountdown", CountdownElementId, timeLeftFormatted);
            }
            catch (JSDisconnectedException)
            {
                IsCircuitActive = false; 
            }
        };
        CountdownTimer.AutoReset = true;
        CountdownTimer.Start();
    }
    
    protected override void OnInitialized()
    {
        base.OnInitialized();

        _theme = new MudTheme
        {
            PaletteLight = _lightPalette,
            PaletteDark = _darkPalette,
            LayoutProperties = new LayoutProperties()
        };
    }

    public ValueTask DisposeAsync()
    {
        if (CountdownTimer != null)
        {
            CountdownTimer.Stop();
            CountdownTimer.Dispose();
            CountdownTimer = null;
        }
        IsCircuitActive = false;
        return ValueTask.CompletedTask;
    }
    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void DarkModeToggle()
    {
        IsDarkMode = !IsDarkMode;
    }


    private readonly PaletteLight _lightPalette = new()
    {
        Black = "#110e2d",
        AppbarText = "#6C7383",
        AppbarBackground = "#3d6889",
        DrawerBackground = "#353c48",
        GrayLight = "#fbfbfb", //vertical pager background
        GrayLighter = "#f9f9f9",
        DrawerText = "#a5adba",
        Secondary = "#ffffff",
        DrawerIcon = "#a5adba",
        Background = "#e3e3e3", //"#f6f6f6",
        Tertiary = "#e5e9ed",
        Primary = "#3d6889",
        
        BackgroundGray = "#e2e2e2", //data grid header and sticky column
        
        
        
    };

    private readonly PaletteDark _darkPalette = new()
    {
        Primary = "#667dab",
        Secondary = "#2b2b2b",
        Tertiary = "#2b2b2b",
        Surface = "#2b2b2b",
        Background = "#555555",
        BackgroundGray = "#151521",
        AppbarText = "#92929f",
        AppbarBackground = "#3d6889",
        DrawerBackground = "#2b2b2b",
        ActionDefault = "#74718e",
        ActionDisabled = "#9999994d",
        ActionDisabledBackground = "#605f6d4d",
        TextPrimary = "#e2e0ed",
        TextSecondary = "#92929f",
        TextDisabled = "#ffffff33",
        DrawerIcon = "#92929f",
        DrawerText = "#cccccc",
        GrayLight = "#2a2833",
        GrayLighter = "#1e1e2d",
        Info = "#4a86ff",
        Success = "#3dcb6c",
        Warning = "#ffb545",
        Error = "#ff3f5f",
        LinesDefault = "#33323e",
        TableLines = "#33323e",
        Divider = "#292838",
        OverlayLight = "#1e1e2d80",
        
    };

    private string DarkLightModeButtonIcon => IsDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };
}


